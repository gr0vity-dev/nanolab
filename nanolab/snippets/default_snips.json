{
    "nanomock_reset_copy_ledger_create": {
        "mandatory_vars": [
            "LEDGER",
            "SETUP_NODES",
            "NL_CONFIG",
            "REMOTE_IP"
        ],
        "commands": [
            {
                "type": "snippet",
                "key": "nanomock_reset_create",
                "variables": {
                    "NL_CONFIG": "{NL_CONFIG}",
                    "REMOTE_IP": "{REMOTE_IP}"
                }
            },
            {
                "type": "snippet",
                "key": "nanomock_copy_ledgers",
                "variables": {
                    "LEDGER": "{LEDGER}",
                    "SETUP_NODES": "{SETUP_NODES}",
                    "IS_ROCKS_DB": "{IS_ROCKS_DB}"
                }
            }
        ]
    },

    "nanomock_reset_create": {
        "mandatory_vars": [
            "NL_CONFIG",
            "REMOTE_IP"
        ],
        "commands": [
            {
                "type": "bash",
                "command": "[ -f nl_config.toml ] && nanomock down || true"
            },
            {
                "type": "bash",
                "command": "cp {NL_CONFIG} nl_config.toml"
            },
            {
                "type": "bash",
                "command": "nanomock conf_edit --payload '{{\"path\" : \"remote_address\",  \"value\" : \"{REMOTE_IP}\"}}'"
            },
            {
                "type": "bash",
                "command": "nanomock conf_edit --payload '{{\"path\" : \"representatives.docker_tag\",  \"value\" : \"{docker_tag}\"}}'"
            },
            {
                "type": "bash",
                "command": "nanomock create && nanomock reset"
            }
        ]
    },

    "nanomock_conf_edit": {
        "mandatory_vars": [
            "PATH",
            "VALUE"
        ],
        "commands": [
            {
                "type": "bash",
                "command": "nanomock conf_edit --payload '{{\"path\" : \"{PATH}\",  \"value\" : \"{VALUE}\"}}'"
            }
        ]
    },

    "nanomock_conf_edit_create": {
        "mandatory_vars": [
            "PATH",
            "VALUE"
        ],
        "commands": [
            {
                "type": "bash",
                "command": "nanomock conf_edit --payload '{{\"path\" : \"{PATH}\",  \"value\" : \"{VALUE}\"}}'"
            },
            {
                "type": "bash",
                "command": "nanomock create"
            }
        ]
    },


    "nanomock_copy_ledgers": {
        "mandatory_vars": [
            "SETUP_NODES",
            "LEDGER"
        ],
        "commands": [
            {
                "type": "bash",
                "command": "for i in {SETUP_NODES}; do if [ \"{IS_ROCKS_DB}\" = true ]; then rm -rf ./nano_nodes/$i/NanoTest/rocksdb && cp -r {LEDGER} ./nano_nodes/$i/NanoTest/rocksdb; else cp {LEDGER} ./nano_nodes/$i/NanoTest/data.ldb; fi; done"
            }
        ]
    },

    "nanomock_start_init": {
        "commands": [
            {
                "type": "bash",
                "command": "nanomock start && nanomock init_wallets"
            }
        ]
    },

    "sql_logger": {
        "mandatory_vars": [
            "CONNECTION_STRING",
            "TESTCASE_NAME",
            "TIMEOUT_S",
            "EXPECTED_BLOCK_COUNT",
            "NODES"
        ],
        "commands": [
            {
                "type": "python",
                "class": "NodeInteraction",
                "method": "start_logger",
                "delay": -0.1,
                "variables": {
                    "logger_params": {
                        "type": "rpc",
                        "timeout": "{TIMEOUT_S}",
                        "expected_blocks_count": "{EXPECTED_BLOCK_COUNT}",
                        "included_peers": "{NODES}"
                    },
                    "sink_params": {
                        "type": "sql",
                        "db_uri": "{CONNECTION_STRING}",
                        "milestones": [
                            10,
                            25,
                            50,
                            75,
                            90,
                            99,
                            100
                        ],
                        "testcase_name": "{TESTCASE_NAME}"
                    }
                }
            }
        ]
    }
}